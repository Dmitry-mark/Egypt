import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  Image, 
  TouchableOpacity, 
  TextInput 
} from 'react-native';

export default function AttractionsScreen() {
  const [searchQuery, setSearchQuery] = useState('');
  const [favorites, setFavorites] = useState([]);

  // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö
  const attractions = [
    { 
      id: '1', 
      name: '–ü–∏—Ä–∞–º–∏–¥—ã –ì–∏–∑—ã', 
      description: '–í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—Ä–∞–º–∏–¥—ã –¥—Ä–µ–≤–Ω–µ–≥–æ –ï–≥–∏–ø—Ç–∞.', 
      image: require('../assets/pyramid.jpg') 
    },
    { 
      id: '2', 
      name: '–°—Ñ–∏–Ω–∫—Å', 
      description: '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—É—è —Å –ª—å–≤–∏–Ω–æ–π –≥–æ–ª–æ–≤–æ–π.', 
      image: require('../assets/sphinx.jpg') 
    },
    { 
      id: '3', 
      name: '–•—Ä–∞–º –ö–∞—Ä–Ω–∞–∫', 
      description: '–û–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ö—Ä–∞–º–æ–≤—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –≤ –º–∏—Ä–µ.', 
      image: require('../assets/temple.jpg') 
    },
    { 
      id: '4', 
      name: '–î–æ–ª–∏–Ω–∞ –¶–∞—Ä–µ–π', 
      description: '–ú–µ—Å—Ç–æ –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è —Ñ–∞—Ä–∞–æ–Ω–æ–≤.', 
      image: require('../assets/valley.jpg') 
    },
  ];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
  const filteredAttractions = attractions.filter(item =>
    item.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const toggleFavorite = (item) => {
    if (favorites.some(fav => fav.id === item.id)) {
      setFavorites(favorites.filter(fav => fav.id !== item.id));
    } else {
      setFavorites([...favorites, item]);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫)
  const removeFavorite = (item) => {
    setFavorites(favorites.filter(fav => fav.id !== item.id));
  };

  return (
    <View style={styles.container}>
      {/* –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ */}
      <TextInput 
        style={styles.searchBar}
        placeholder="–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π..."
        value={searchQuery}
        onChangeText={setSearchQuery}
      />

      {/* –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ */}
      {favorites.length > 0 && (
        <ScrollView 
          horizontal 
          style={styles.favoritesContainer}
          contentContainerStyle={styles.favoritesContent}
        >
          {favorites.map(item => (
            <View key={item.id} style={styles.favoriteItem}>
              <Image 
                source={item.image} 
                style={styles.favoriteImage} 
                resizeMode="cover" 
              />
              <TouchableOpacity 
                style={styles.removeFavoriteButton} 
                onPress={() => removeFavorite(item)}
              >
                <Text style={styles.removeFavoriteText}>‚úï</Text>
              </TouchableOpacity>
            </View>
          ))}
        </ScrollView>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      <ScrollView contentContainerStyle={styles.cardsContainer}>
        {filteredAttractions.length > 0 ? (
          filteredAttractions.map(item => (
            <View key={item.id} style={styles.card}>
              <Image 
                source={item.image} 
                style={styles.cardImage} 
                resizeMode="cover" 
              />
              <View style={styles.cardContent}>
                <Text style={styles.cardTitle}>{item.name}</Text>
                <Text style={styles.cardDescription}>{item.description}</Text>
              </View>
              <TouchableOpacity 
                style={styles.favoriteIcon} 
                onPress={() => toggleFavorite(item)}
              >
                <Text style={styles.favoriteIconText}>
                  {favorites.some(fav => fav.id === item.id) ? '‚ù§Ô∏è' : 'ü§ç'}
                </Text>
              </TouchableOpacity>
            </View>
          ))
        ) : (
          <Text style={styles.notFoundText}>–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</Text>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 10,
  },
  searchBar: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  favoritesContainer: {
    maxHeight: 80,
    marginBottom: 10,
  },
  favoritesContent: {
    alignItems: 'center',
  },
  favoriteItem: {
    width: 70,
    height: 70,
    marginRight: 10,
    position: 'relative',
  },
  favoriteImage: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
  },
  removeFavoriteButton: {
    position: 'absolute',
    top: -5,
    right: -5,
    backgroundColor: 'rgba(255,0,0,0.8)',
    borderRadius: 12,
    width: 24,
    height: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  removeFavoriteText: {
    color: '#fff',
    fontSize: 16,
  },
  cardsContainer: {
    paddingBottom: 20,
  },
  card: {
    backgroundColor: '#f2f2f2',
    borderRadius: 8,
    marginBottom: 15,
    overflow: 'hidden',
    position: 'relative',
  },
  cardImage: {
    width: '100%',
    height: 150,
  },
  cardContent: {
    padding: 10,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  cardDescription: {
    fontSize: 14,
    color: '#555',
  },
  favoriteIcon: {
    position: 'absolute',
    top: 10,
    right: 10,
  },
  favoriteIconText: {
    fontSize: 24,
  },
  notFoundText: {
    textAlign: 'center',
    marginTop: 20,
    fontSize: 16,
    color: '#555',
  },
});
